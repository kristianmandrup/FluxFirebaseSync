// Generated by LiveScript 1.2.0
/**
 * User: kmandrup
 * Date: 26/08/14
 * Time: 13:28
 */
(function(){
  var ListMutator, ChangeDetector, ChangeManager, toString$ = {}.toString;
  ListMutator = (function(){
    ListMutator.displayName = 'ListMutator';
    var prototype = ListMutator.prototype, constructor = ListMutator;
    function ListMutator(list){
      this.list = list;
    }
    prototype.remove = function(items){
      var any_removed, i$, len$, removed_item;
      any_removed = false;
      for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
        removed_item = items[i$];
        if (toString$.call(removed_item).slice(8, -1) === 'Object') {
          any_removed = true;
          this.list.$remove(removed_item.$id);
        }
      }
      return any_removed;
    };
    prototype.add = function(items){
      var any_added, i$, len$, added_item, results$ = [];
      any_added = false;
      for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
        added_item = items[i$];
        if (toString$.call(added_item).slice(8, -1) === 'Object') {
          any_added = true;
          this.list.$add(added_item);
        }
        results$.push(any_added);
      }
      return results$;
    };
    return ListMutator;
  }());
  ChangeDetector = (function(){
    ChangeDetector.displayName = 'ChangeDetector';
    var prototype = ChangeDetector.prototype, constructor = ChangeDetector;
    function ChangeDetector(change){
      this.change = change;
    }
    prototype.any_removed = function(){
      return this.change.type === 'splice' && this.change.removed.length > 0;
    };
    prototype.any_added = function(){
      return this.change.type === 'splice' && this.change.addedCount > 0;
    };
    return ChangeDetector;
  }());
  ChangeManager = (function(){
    ChangeManager.displayName = 'ChangeManager';
    var prototype = ChangeManager.prototype, constructor = ChangeManager;
    function ChangeManager(list, change){
      this.list = list;
      this.change = change;
    }
    prototype.list_mutator = new ListMutator(ChangeManager.list);
    prototype.change_detector = new ChangeDetector(ChangeManager.change);
    prototype.try_remove = function(){
      if (!this.change_detector.any_removed()) {
        return false;
      }
      return this.list_mutator.remove(this.change.removed);
    };
    prototype.try_add = function(){
      if (!this.change_detector.any_added(this.change)) {
        return false;
      }
      return this.list_mutator.add(this.added_items(this.change));
    };
    prototype.added_items = function(){
      return this.list.slice(this.change.index, last_index);
    };
    prototype.last_index = function(){
      return this.change.index + this.change.added_count + 1;
    };
    prototype.doChange = function(){
      return {
        added: this.try_add(),
        removed: this.try_remove()
      };
    };
    return ChangeManager;
  }());
}).call(this);
