// Generated by LiveScript 1.2.0
/**
 * User: kmandrup
 * Date: 26/08/14
 * Time: 13:27
 */
(function(){
  var PositionCalc, ListExtender;
  PositionCalc = require('position_calc');
  ListExtender = (function(){
    ListExtender.displayName = 'ListExtender';
    var prototype = ListExtender.prototype, constructor = ListExtender;
    function ListExtender(list, list_ref, sync_store){
      this.list = list;
      this.list_ref = list_ref;
      this.sync_store = sync_store;
      this.calc = new PositionCalc(this.list);
    }
    prototype.reference_for = function(key){
      return this.list_ref.child(key);
    };
    prototype.wrap_crud = function(){
      var self;
      self = this;
      this.list.$add = function(data){
        return self.sync_store.update_data(this.list_ref, 'push', data);
      };
      this.list.$remove = function(key){
        return self.reference_for(key).remove();
      };
      this.list.$removeList = function(keys){
        var i$, x$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = in$(key, keys)).length; i$ < len$; ++i$) {
          x$ = ref$[i$];
          results$.push(this.list.$remove(key));
        }
        return results$;
      };
      this.list.$set = function(key, new_data){
        if (new_data.has_own_property('$id')) {
          delete new_data.$id;
        }
        return self.sync_store.update_data(this.reference_for(key), 'set', new_data);
      };
      return this.list.$index_of = function(key){
        return self.calc.position_for(key);
      };
    };
    return ListExtender;
  }());
  module.exports = ListExtender;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
