// Generated by LiveScript 1.2.0
/**
 * User: kmandrup
 * Date: 26/08/14
 * Time: 13:26
 */
(function(){
  var Repo, slice$ = [].slice;
  Repo = function(){
    var req_actions, RepoFactory;
    req_actions = slice$.call(arguments);
    return RepoFactory = (function(){
      RepoFactory.displayName = 'RepoFactory';
      var prototype = RepoFactory.prototype, constructor = RepoFactory;
      function RepoFactory(options){
        this.options = options;
      }
      prototype.validate_actor = function(actor){
        var i$, ref$, len$, required_action, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.required_actions).length; i$ < len$; ++i$) {
          required_action = ref$[i$];
          if (!actor[required_action]) {
            results$.push(this.action_error(actor, required_action));
          }
        }
        return results$;
      };
      prototype.action_error = function(actor, action){
        throw new Error("Required " + action + " function not found in " + actor);
      };
      prototype.required_actions = req_actions || ['execute'];
      prototype.repo = RepoFactory.options.repo || {};
      prototype.find_for = function(class_name){
        return this.repo[class_name];
      };
      prototype.add_for = function(class_name, actor){
        this.validate_actor(actor);
        return this.repo[class_name] = actor;
      };
      prototype.remove_for = function(class_name){
        return this.repo['delete'](class_name);
      };
      return RepoFactory;
    }());
  };
  module.exports = {
    Validator: Repo('validate'),
    Marshaller: Repo('marshal', 'unmarshal')
  };
}).call(this);
